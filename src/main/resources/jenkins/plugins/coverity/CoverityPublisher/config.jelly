<!--
 /*******************************************************************************
 * Copyright (c) 2018 Synopsys, Inc
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Synopsys, Inc - initial implementation and documentation
 *******************************************************************************/
-->
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:f="/lib/form" xmlns:c="/lib/credentials" xmlns:l="/lib/layout">
    <j:set var="javaOption" value="${instance.javaOptionBlock}"/>
	<script type="text/javascript">
    document.observe("dom:loaded", function() {
      // check for initial stream validation
      var invalidStream = document.getElementById('invalidStream');
      if (invalidStream) {
        var streamSelect = document.getElementById("stream");
        showErrorMessage(streamSelect, "Stream [ " + invalidStream.value + " ] is not found");
      }

      // check for initial project validation
      var invalidProject = document.getElementById('invalidProject');
      if (invalidProject) {
        var projectSelect = document.getElementById("project");
        showErrorMessage(projectSelect, "Project [ " + invalidProject.value + " ] is not found");
      }
    });

    function loadDefectFilters() {
      var form = document.getElementById('cimInstance').form;
      buildFormTree(form);

      var json = form.elements["json"].value;

      new Ajax.Request("${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/defectFiltersConfig", {
        parameters: {json: json},
        onComplete: function (rsp) {
          var target = document.getElementById("defectFilters");
          target.innerHTML = rsp.status == 200 ? rsp.responseText
            : '&lt;a href="" onclick="document.getElementById(\'valerr' +
            (i = iota++) +
            '\').style.display=\'block\';return false"&gt;ERROR' +
            '&lt;/a&gt;' +
            '&lt;div id="valerr' + i + '" style="display:none"&gt;' +
            rsp.responseText +
            '&lt;/div&gt;';
          Behaviour.applySubtree(target);

          document.getElementById('filters').style.display = 'none';
          document.getElementById('showFilters').style.display = 'block';
          document.getElementById('hideFilters').style.display = 'none';
        }
      });
    }

    function loadProjects() {

      var form = document.getElementById('cimInstance').form;
      buildFormTree(form);

      var json = form.elements["json"].value;

      new Ajax.Request("${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/loadProjectsForInstance", {
        parameters: {json: json},
        onLoading: showLoadingProjects(),
        onComplete: function (t) {
          var projectSelect = document.getElementById("project");

          if (t.status == 200) {
            var json = t.responseText.evalJSON();

            projectSelect.options.length = 0;

            json.projects.each(function (project) {
              var opt = document.createElement("option");
              opt.value = project;
              opt.text = project;
              projectSelect.appendChild(opt);
            });
            if (json.selectedProject)
              projectSelect.value = json.selectedProject;

            if (!json.validSelection) {
              var invalidInput = document.createElement('input');
              invalidInput.setAttribute('id', 'invalidProject');
              invalidInput.setAttribute('type', 'hidden');
              invalidInput.value = json.selectedProject;

              projectSelect.parentNode.append(invalidInput);

              showErrorMessage(projectSelect, "Project [ " + json.selectedProject + " ] is not found");
            } else {
              hideErrorMessage(projectSelect, '#invalidProject');
              loadStreams();
            }
          } else {
            showErrorMessage(projectSelect, "Error loading projects, server returned " + t.status);
          }

          hideLoadingProjects();
        }
      });
    }

    function loadStreams() {

      var form = document.getElementById('cimInstance').form;
      buildFormTree(form);

      var json = form.elements["json"].value;

      new Ajax.Request("${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/loadStreamsForProject", {
        parameters: {json: json},
        onComplete: function (t) {
          var streamSelect = document.getElementById("stream");

          if (t.status == 200) {
            var json = t.responseText.evalJSON();

            streamSelect.options.length = 0;

            json.streams.each(function (stream) {
              var opt = document.createElement("option");
              opt.value = stream;
              opt.text = stream;
              streamSelect.appendChild(opt);
            });
            if (json.selectedStream)
              streamSelect.value = json.selectedStream;

            if (!json.validSelection) {
              var invalidInput = document.createElement('input');
              invalidInput.setAttribute('id', 'invalidStream');
              invalidInput.setAttribute('type', 'hidden');
              invalidInput.value = json.selectedStream;

              streamSelect.parentNode.append(invalidInput);

              showErrorMessage(streamSelect, "Stream [ " + json.selectedStream + " ] is not found");
            } else {
              hideErrorMessage(streamSelect, '#invalidStream');
              loadDefectFilters();
            }
          } else {
            showErrorMessage(streamSelect, "Error loading streams, server returned " + t.status);
          }
        }
      });
    }

    function validateProjectSelection() {
      var projectSelect = document.getElementById("project");
      var projectValue = projectSelect.value;

      var parentCell = projectSelect.parentNode;
      var parentRow = parentCell.parentNode;

      var validationCell = parentRow.next('.validation-error-area').childElements()[1];
      var invalidProject = parentCell.select('[id=invalidProject]')[0];

      if (invalidProject &amp;&amp; invalidProject.value != projectValue) {
        validationCell.innerHTML = '';
        parentCell.removeChild(invalidProject);
        var invalidOption = projectSelect.querySelector('option[value="' + invalidProject.value + '"]');
        if (invalidOption)
          projectSelect.removeChild(invalidOption);
      }
    }

    function validateStreamSelection() {
      var streamSelect = document.getElementById("stream");
      var streamValue = streamSelect.value;

      var parentCell = streamSelect.parentNode;
      var parentRow = parentCell.parentNode;

      var validationCell = parentRow.next('.validation-error-area').childElements()[1];
      var invalidStream = parentCell.select('[id=invalidStream]')[0];

      if (invalidStream &amp;&amp; invalidStream.value != streamValue) {
        validationCell.innerHTML = '';
        parentCell.removeChild(invalidStream);
        var invalidOption = streamSelect.querySelector('option[value="' + invalidStream.value + '"]');
        if (invalidOption)
          streamSelect.removeChild(invalidOption);
      }
    }

    function showErrorMessage(fieldControl, errorMessage) {
      var errorDiv = document.createElement('div');
      errorDiv.setAttribute('class', 'error');
      errorDiv.innerHTML = errorMessage;

      var parentRow = fieldControl.parentNode.parentNode;
      var validationCell = parentRow.next('.validation-error-area').childElements()[1];

      if (validationCell.childElementCount == 0) {
        validationCell.appendChild(errorDiv);
      }
    }

    function hideErrorMessage(fieldControl, invalidIdSelector) {
      var parentCell = fieldControl.parentNode;
      var hiddenInvalid = parentCell.select(invalidIdSelector)[0];
      if (hiddenInvalid) {
        parentCell.removeChild(hiddenInvalid);
      }

      var parentRow = parentCell.parentNode;
      var validationCell = parentRow.next('.validation-error-area').childElements()[1];
      var errorDiv = validationCell.querySelector('div.error');

      if (validationCell) {
        if (errorDiv) {
          validationCell.removeChild(errorDiv);
        }
      }
    }

    function showLoadingProjects() {
      var parentCell = document.getElementById('cimInstance').parentNode;
      if (parentCell) {
        var loadingDiv = parentCell.select("#projectsloading").first();

        if (!loadingDiv) {
          var loadingDiv = document.createElement('div');
          loadingDiv.setAttribute('id', 'projectsloading');
          loadingDiv.innerHTML = "Loading projects...";
          loadingDiv.hide();
          parentCell.appendChild(loadingDiv);
        }

        function showLoading(ld) {
          ld.show();
        }

        showLoading.delay(0.2, loadingDiv);
      }
    }

    function hideLoadingProjects() {
      var parentCell = document.getElementById('cimInstance').parentNode;
      var loadingDiv = parentCell.select("#projectsloading").first();
      if (parentCell) {
        if (loadingDiv) {
          parentCell.removeChild(loadingDiv);
        }
      }
    }
  </script>
	<script type="text/javascript">
		function checkFilters(state) {
			YAHOO.util.Dom.getElementsBy(
					function (el) {
						return (el.name == 'checkers');
					},
					'input',
					'checkers',
					function (el) {
						el.checked = (state ? 'true' : null);
					}
			);
		}

		function checkFiltersComponents(state) {
			YAHOO.util.Dom.getElementsBy(
					function (el) {
						return (el.name == 'components');
					},
					'input',
					'filters',
					function (el) {
						el.checked = (state ? 'true' : null);
					}
			);
		}
	</script>
	<script type="text/javascript">
		function checkCoverityConfig() {
			var form = document.getElementById('checkConfigHidden').form;
			buildFormTree(form);

			var json = form.elements["json"].value;
			var target = document.getElementById("checkConfigOutput");

			target.innerHTML = 'Validating configuration...';

			new Ajax.Request("${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/checkConfig", {
				parameters: { json: json },
				onComplete: function (rsp) {
					target.innerHTML = rsp.status == 200 ? rsp.responseText
							: '&lt;a href="" onclick="document.getElementById(\'valerr' +
							(i = iota++) +
							'\').style.display=\'block\';return false"&gt;ERROR' +
							'&lt;/a&gt;' +
							'&lt;div id="valerr' + i + '" style="display:none"&gt;' +
							rsp.responseText +
							'&lt;/div&gt;';
					Behaviour.applySubtree(target);
				}
			});
		}
	</script>
	<tr>
		<td width="5%"/>
		<td colspan="3">
			<table width="100%">
				<j:if test="${instance.cimInstance != null}">
					<f:entry>
						<span style="color: #ff0000; font-weight: bold;">
							You have deprecated data in your job config. Please save your configuration or
							run a build of this job, then reload this page before changing any values.
						</span>
					</f:entry>
				</j:if>
				<f:entry>
				    <div>
					    <input type="button" id="checkConfigHidden" onClick="checkCoverityConfig()" value="Check configuration" />
					    <div id="checkConfigOutput" />
					</div>
				</f:entry>
				<f:entry field="cimStream">
          <j:choose>
            <j:when test="${instance == null}">
              <j:set var="descriptor" value="${descriptor.getCIMStreamDescriptor()}" />
            </j:when>
            <j:otherwise>
              <j:set var="instance" value="${instance.cimStream}" />
              <j:set var="descriptor" value="${instance.descriptor}" />
            </j:otherwise>
          </j:choose>
						<table width="100%" name="cimStream">
							<f:entry title="Coverity Connect instance" field="instance">
								<f:select id="cimInstance" onchange="loadProjects()"/>
							</f:entry>

							<f:entry title="Project" field="project">
                                <select id="project" name="project" class="setting-input" onchange="validateProjectSelection();loadStreams()">
                                  <j:forEach var="proj" items="${descriptor.loadProjects(instance.instance, instance.project)}">
                                    <j:choose>
                                      <j:when test="${proj == instance.project}">
                                        <option value="${proj}" selected="selected">${proj}</option>
                                      </j:when>
                                      <j:otherwise>
                                        <option value="${proj}">${proj}</option>
                                      </j:otherwise>
                                    </j:choose>
                                  </j:forEach>
                                </select>
                                <j:set var="initialProjectIsValid" value="${descriptor.checkProjectIsValid(instance.instance, instance.project)}"/>
                                <j:if test="${!initialProjectIsValid}">
                                  <input type="hidden" id="invalidProject" value="${instance.project}" />
                                </j:if>
							</f:entry>

							<f:entry title="Stream" field="stream">
								<select id="stream" name="stream" class="setting-input" onchange="validateStreamSelection();loadDefectFilters()">
                                  <j:forEach var="str" items="${descriptor.loadStreams(instance.instance, instance.project, instance.stream)}">
                                    <j:choose>
                                      <j:when test="${str == instance.stream}">
                                        <option value="${str}" selected="selected">${str}</option>
                                      </j:when>
                                      <j:otherwise>
                                        <option value="${str}">${str}</option>
                                      </j:otherwise>
                                    </j:choose>
                                  </j:forEach>
                                </select>
                                <j:set var="initialStreamIsValid" value="${descriptor.checkStreamIsValid(instance.instance, instance.project, instance.stream)}"/>
                                <j:if test="${!initialStreamIsValid}">
                                  <input type="hidden" id="invalidStream" value="${instance.stream}" />
                                </j:if>
							</f:entry>

							<f:entry title="" field="defectFilters">
								<tr>
									<td class="setting-leftspace">
										<st:nbsp/>
									</td>
									<td class="setting-name">
										<a href="#filters" id="showFilters"
										   onclick="document.getElementById('filters').style.display='block';document.getElementById('hideFilters').style.display='block';this.style.display='none';">
											Defect Filters >>>
										</a>
										<a href="#filters" id="hideFilters"
										   style="display: none;"
										   onclick="document.getElementById('filters').style.display='none';document.getElementById('showFilters').style.display='block';this.style.display='none';">
											Defect Filters &lt;&lt;&lt;</a>
									</td>
									<td class="setting-main">
										<table width="100%" id="defectFilters" name="defectFilters">
											<st:include from="${descriptor}" page="defectFilters.jelly" />
										</table>
									</td>
									<td class="setting-help">
										<a href="#" class="help-button"
										   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/defectFilters">
											<l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
										</a>
									</td>
									<f:helpArea/>
								</tr>
							</f:entry>

                            <j:set var="descriptor" value="${descriptor.getPublisherDescriptor()}" />
							<f:entry title="Override Credentials" field="credentialId"
							    help="/plugin/coverity/help-overrideCredentialId.html">
                                <c:select/>
                            </f:entry>

						</table>
				</f:entry>

                <f:optionalBlock title="Perform Coverity build, analysis and commit" field="invocationAssistance"
								 checked="${instance.invocationAssistance != null}" name="invocationAssistance">
					<j:set var="instance" value="${instance.invocationAssistance}"/>
                    <f:block>
                        <table style="padding-left:2%; width:100%;">
                            <f:entry title="Support scripting language sources during cov-build phase" field="isScriptSrc">
                                <f:checkbox/>
                            </f:entry>
                            <f:entry title="Additional cov-build arguments:" field="buildArguments">
                                <f:textbox/>
                            </f:entry>
                            <f:optionalBlock title="Add post cov-build command" field="postCovBuild" checked="${instance.postCovBuildCmd != null}">
                                <f:block>
                                    <table style="padding-left:2%; width:100%;">
                                        <f:entry title="Post cov-build command:" field="postCovBuildCmd">
                                            <f:textbox/>
                                        </f:entry>
                                    </table>
                                </f:block>
                            </f:optionalBlock>
                            <f:entry title="Additional cov-analyze arguments:" field="analyzeArguments">
                                <f:textbox/>
                            </f:entry>
                            <f:optionalBlock title="Add post cov-analyze command" field="postCovAnalyze" checked="${instance.postCovAnalyzeCmd != null}">
                                <f:block>
                                    <table style="padding-left:2%; width:100%;">
                                        <f:entry title="Post cov-analyze command:" field="postCovAnalyzeCmd">
                                            <f:textbox/>
                                        </f:entry>
                                    </table>
                                </f:block>
                            </f:optionalBlock>
                            <f:entry title="Additional cov-commit-defects arguments:" field="commitArguments">
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="Intermediate directory:" field="intermediateDir">
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="Use advanced parsing mechanism" field="useAdvancedParser">
                                <f:checkbox/>
                            </f:entry>
                            <f:optionalBlock title="Use MISRA for analysis and commit" field="misraConfig" checked="${instance.misraConfigFile != null}">
                                <f:block>
                                    <table style="padding-left:2%; width:100%;">
                                        <f:entry title="MISRA configuration file:" field="misraConfigFile">
                                            <f:textbox/>
                                        </f:entry>
                                    </table>
                                </f:block>
                            </f:optionalBlock>
                            <f:entry title="(Only for C#) Search for Microsoft Code Analysis results:" field="csharpMsvsca">
                                <f:checkbox/>
                            </f:entry>

                            <f:entry title="(Only for Java) WAR files:" field="javaWarFiles">
                                <f:repeatable field="javaWarFiles" add="Add War File">
                                    <table width="100%">
                                        <f:entry title="War File" field="warFile">
                                            <f:textbox/>
                                        </f:entry>
                                    </table>
                                    <div align="right">
                                        <input type="button" value="Remove War File" class="repeatable-delete" style="margin-left: 1em;"/>
                                    </div>
                                </f:repeatable>
                            </f:entry>

                            <f:optionalBlock title="Static analysis tools override" field="toolsOverride" checked="${instance.toolsOverride != null}">
                                <j:set var="instance" value="${instance.toolsOverride}"/>
                                <f:entry title="Static analysis tool installation:" field="toolInstallationName">
                                    <f:select/>
                                </f:entry>
                                <f:entry title="Static analysis location override:" field="toolsLocation">
                                    <f:textbox/>
                                </f:entry>
                            </f:optionalBlock>
                        </table>
                    </f:block>
				</f:optionalBlock>



                <f:optionalBlock title="Perform Coverity Test Advisor and Commit" field="taOptionBlock"
                        checked="${instance.taOptionBlock != null}" name="taOptionBlock">
                    <j:set var="instance" value="${instance.taOptionBlock}"/>
                    <f:block>
                        <table style="padding-left:1%; width:100%;">
                            <f:section title="Test Advisor Configuration">
                                <f:entry title="Custom command to run tests " field="customTestCommand">
                                    <f:textbox/>
                                </f:entry>
                                <f:entry title="TA Policy File (Required):" field="policyFile">
                                    <f:textbox/>
                                </f:entry>
                                <f:entry title="Strip Path:" field="taStripPaths">
                                    <f:repeatable field="taStripPaths" add="Add Strip Path">
                                        <table width="100%">
                                            <f:entry title="Strip Path" field="taStripPath">
                                                <f:textbox/>
                                            </f:entry>
                                        </table>
                                        <div align="right">
                                            <input type="button" value="Remove Strip Path" class="repeatable-delete" style="margin-left: 1em;"/>
                                        </div>
                                    </f:repeatable>
                                </f:entry>
                                <f:entry title="Enable Cov-Manage-History" field="covHistoryCheckbox">
                                                <f:checkbox/>
                                </f:entry>
                                <tr>
                                    <f:block>
                                        <table>
                                            <f:section title="C/C++ Coverage Configuration"/>
                                            <f:entry title="C/C++ Coverage" field="cOptionBlock">
                                                <f:checkbox/>
                                            </f:entry>

                                            <f:entry name="cxxCoverageTool" title="Choose a C/C++ Coverage Tool:" field="cxxCoverageTool">
                                                <select name="cxxCoverageTool">
                                                    <j:choose>
                                                        <j:when test="${instance.cxxCoverageTool eq 'none'}">
                                                            <option value="none" selected="selected">none</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="none">none</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                    <j:choose>
                                                        <j:when test="${instance.cxxCoverageTool eq 'gcov' &amp;&amp; instance.cOptionBlock}">
                                                            <option value="gcov" selected="selected">gcov</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="gcov">gcov</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                    <j:choose>
                                                        <j:when test="${instance.cxxCoverageTool eq 'bullseye' &amp;&amp; instance.cOptionBlock}">
                                                            <option value="bullseye" selected="selected">bullseye</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="bullseye">bullseye</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                </select>
                                            </f:entry>
                                            <f:entry title="Bulls Eye Directory:" field="bullsEyeDir">
                                                <f:textbox/>
                                            </f:entry>
                                        </table>
                                    </f:block>
                                </tr>
                                <tr>
                                    <f:block>
                                        <table>
                                            <f:section title="C# Coverage Configuration"/>
                                            <f:entry title="C# Coverage" field="csOptionBlock">
                                                <f:checkbox/>
                                            </f:entry>
                                            <f:entry name="csCoverageTool" title="Choose a C# Coverage Tool:" field="csCoverageTool">
                                                <select name="csCoverageTool">
                                                    <j:choose>
                                                        <j:when test="${instance.csCoverageTool eq 'none'}">
                                                            <option value="none" selected="selected">none</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="none">none</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                    <j:choose>
                                                        <j:when test="${instance.csCoverageTool eq 'opencover' &amp;&amp; instance.csOptionBlock}">
                                                            <option value="opencover" selected="selected">opencover</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="opencover">opencover</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                </select>
                                            </f:entry>

                                            <f:entry title="Choose a C# Test Framework:" field="csFramework">
                                                <st:nbsp /><st:nbsp />
                                                <f:radio name="csFramework"
                                                         checked="${instance.csFramework == 'mstest' &amp;&amp; instance.csOptionBlock}" value="mstest"/>
                                                <label class="attach-previous">mstest</label>
                                                <st:nbsp /><st:nbsp />
                                                <f:radio name="csFramework"
                                                         checked="${instance.csFramework == 'nunit' &amp;&amp; instance.csOptionBlock}" value="nunit"/>
                                                <label class="attach-previous">nunit</label>
                                                <st:nbsp /><st:nbsp />
                                                <f:radio name="csFramework"
                                                         checked="${instance.csFramework == 'xunit' &amp;&amp; instance.csOptionBlock}" value="xunit"/>
                                                <label class="attach-previous">xunit</label>
                                                <st:nbsp /><st:nbsp />
                                                <f:radio name="csFramework"
                                                         checked="${instance.csFramework == 'none' || !instance.csOptionBlock}" value="none"/>
                                                <label class="attach-previous">none</label>
                                            </f:entry>
                                        </table>
                                    </f:block>
                                </tr>
                                <tr>
                                    <f:block>
                                        <table>
                                            <f:section title="Java Coverage Configuration"/>
                                            <f:entry title="Java Coverage" field="javaOptionBlock">
                                                <f:checkbox/>
                                            </f:entry>
                                            <f:entry name="javaCoverageTool" title="Choose a Java Coverage Tool:" field="javaCoverageTool">
                                                <select name="javaCoverageTool">
                                                    <j:choose>
                                                        <j:when test="${instance.javaCoverageTool eq 'none' || !instance.javaOptionBlock}">
                                                            <option value="none" selected="selected">none</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="none">none</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                    <j:choose>
                                                        <j:when test="${instance.javaCoverageTool eq 'cobertura' &amp;&amp; instance.javaOptionBlock}">
                                                            <option value="cobertura" selected="selected">cobertura</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="cobertura">cobertura</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                    <j:choose>
                                                        <j:when test="${instance.javaCoverageTool eq 'jacoco' &amp;&amp; instance.javaOptionBlock}">
                                                            <option value="jacoco" selected="selected">jacoco</option>
                                                        </j:when>
                                                        <j:otherwise>
                                                            <option value="jacoco">jacoco</option>
                                                        </j:otherwise>
                                                    </j:choose>
                                                </select>
                                            </f:entry>

                                            <f:entry title="Choose a Java Test Framework:">
                                                <st:nbsp /><st:nbsp />
                                                <f:checkbox title="junit" field="junitFramework"
                                                            checked="${instance.junitFramework &amp;&amp; instance.javaOptionBlock}"/>
                                                <st:nbsp /><st:nbsp />
                                                <f:checkbox title="junit4" field="junit4Framework"
                                                            checked="${instance.junit4Framework &amp;&amp; instance.javaOptionBlock}"/>
                                            </f:entry>
                                        </table>
                                    </f:block>
                                </tr>
                            </f:section>
                        </table>
                    </f:block>
                </f:optionalBlock>

                <f:optionalBlock title="Source Control Configuration 'SCM' (Optional)" field="scmOptionBlock"
                                 checked="${instance.scmOptionBlock != null}" name="scmOptionBlock">
                        <j:set var="instance" value="${instance.scmOptionBlock}"/>
                        <f:block>

                        <f:entry name="scmSystem" title="Source Control Systems:" field="scmSystem">
                            <select name="scmSystem">
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'none'}">
                                        <option value="none" selected="selected">none</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="none">none</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'accurev'}">
                                        <option value="accurev" selected="selected">AccuRev</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="accurev">AccuRev</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'clearcase'}">
                                        <option value="clearcase" selected="selected">ClearCase</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="clearcase">ClearCase</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'cvs' }">
                                        <option value="cvs" selected="selected">Concurrent Version System</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="cvs">Concurrent Version System</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'git' }">
                                        <option value="git" selected="selected">Git</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="git">Git</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'hg' }">
                                        <option value="hg" selected="selected">Mercuial</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="hg">Mercuial</option>
                                    </j:otherwise>
                                </j:choose><j:choose>
                                    <j:when test="${instance.scmSystem eq 'perforce' }">
                                        <option value="perforce" selected="selected">Perforce</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="perforce">Perforce</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'perforce2009' }">
                                        <option value="perforce2009" selected="selected">Perforce 2009</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="perforce2009">Perforce 2009</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'plastic' }">
                                        <option value="plastic" selected="selected">Plastic</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="plastic">Plastic</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'plastic-distributed' }">
                                        <option value="plastic-distributed" selected="selected">Plastic (fully distributed)</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="plastic-distributed">Plastic (fully distributed)</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'svn' }">
                                        <option value="svn" selected="selected">Subversion</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="svn">Subversion</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2008' }">
                                        <option value="tfs2008" selected="selected">Team Foundation Server 2008</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2008">Team Foundation Server 2008</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2010' }">
                                        <option value="tfs2010" selected="selected">Team Foundation Server 2010</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2010">Team Foundation Server 2010</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2012' }">
                                        <option value="tfs2012" selected="selected">Team Foundation Server 2012</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2012">Team Foundation Server 2012</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2013' }">
                                        <option value="tfs2013" selected="selected">Team Foundation Server 2013</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2013">Team Foundation Server 2013</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2015' }">
                                        <option value="tfs2015" selected="selected">Team Foundation Server 2015</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2015">Team Foundation Server 2015</option>
                                    </j:otherwise>
                                </j:choose>
                                <j:choose>
                                    <j:when test="${instance.scmSystem eq 'tfs2017' }">
                                        <option value="tfs2017" selected="selected">Team Foundation Server 2017</option>
                                    </j:when>
                                    <j:otherwise>
                                        <option value="tfs2017">Team Foundation Server 2017</option>
                                    </j:otherwise>
                                </j:choose>
                            </select>
                        </f:entry>
                        <f:entry title="AccuRev root repository" field="accRevRepo">
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="Perforce P4PORT" field="p4Port">
                                <f:textbox/>
                        </f:entry>

                        <f:advanced>
                            <f:entry title="Custom Tool Path (optional)" field="customTestTool">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="SCM Tool Arguments (optional)" field="scmToolArguments">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="SCM Command Arguments (optional)" field="scmCommandArgs">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="Log File Location (optional)" field="logFileLoc">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="File regex (optional)" field="fileRegex">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                            <f:entry title="Additional scm arguments (optional)" field="scmAdditionalCmd">
                                <st:nbsp /><st:nbsp />
                                <f:textbox/>
                            </f:entry>
                        </f:advanced>
                    </f:block>
                </f:optionalBlock>

				<tr>
					<td class="setting-name" colspan="3">
						<f:checkbox field="failBuild"/>
						<label class="attach-previous">Fail the build if matching defects are found</label>
					</td>
					<td class="setting-help">
						<a href="#" class="help-button"
						   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/failBuild">
                            <l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
						</a>
					</td>
				</tr>
				<f:helpArea/>
				<tr>
					<td class="setting-name" colspan="3">
						<f:checkbox field="unstable"/>
						<label class="attach-previous">Mark build as unstable if matching defects are found</label>
					</td>
					<td class="setting-help">
						<a href="#" class="help-button"
						   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/unstable">
                            <l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
						</a>
					</td>
				</tr>
				<f:helpArea/>
				<tr>
					<td class="setting-name" colspan="3">
						<f:checkbox field="skipFetchingDefects"/>
						<label class="attach-previous">Do not fetch defects after the build</label>
					</td>
					<td class="setting-help">
						<a href="#" class="help-button"
						   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/skipFetchingDefects">
                            <l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
						</a>
					</td>
				</tr>
				<f:helpArea/>
				<tr>
					<td class="setting-name" colspan="3">
						<f:checkbox field="keepIntDir"/>
						<label class="attach-previous">Preserve the intermediate directory after each build</label>
					</td>
					<td class="setting-help">
						<a href="#" class="help-button"
						   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/keepIntDir">
                            <l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
						</a>
					</td>
				</tr>
				<f:helpArea/>
				<tr>
					<td class="setting-name" colspan="3">
						<f:checkbox field="hideChart"/>
						<label class="attach-previous">Hide the defects chart on the project page</label>
					</td>
					<td class="setting-help">
						<a href="#" class="help-button"
						   helpURL="${rootURL}/descriptor/jenkins.plugins.coverity.CoverityPublisher/help/hideChart">
                            <l:icon class="icon-help icon-sm" alt="Help for feature: ${title}"/>
						</a>
					</td>
				</tr>

				<f:helpArea/>
				<j:if test="${instance.cimInstance != null}">
					<f:advanced
							title="Deprecated Fields (Save your config or run a build to upgrade your job to the current format)">
						<f:entry title="Coverity Connect instance" field="cimInstance">
							<f:textbox disabled="disabled"/>
						</f:entry>
						<f:entry title="Project" field="project">
							<f:textbox disabled="disabled"/>
						</f:entry>
						<f:entry title="Stream" field="stream">
							<f:textbox disabled="disabled"/>
						</f:entry>
					</f:advanced>
				</j:if>
			</table>
		</td>
	</tr>
</j:jelly>
